const state = {
    chat_id: null,
    username: "Unknown",
    balance: 1000,
    level: 1
};

function saveState() {
    localStorage.setItem('clickerGameState', JSON.stringify(state));
}

function loadState() {
    const savedState = localStorage.getItem('clickerGameState');
    if (savedState) {
        Object.assign(state, JSON.parse(savedState));
    }
}

function updateUI() {
    document.getElementById('username').textContent = state.username;
    document.getElementById('level').textContent = state.level;
    document.getElementById('balance').textContent = state.balance.toFixed(1);
}

function showMessage(message) {
    const messageDiv = document.getElementById('message');
    messageDiv.textContent = message;
    setTimeout(() => messageDiv.textContent = '', 3000);
}

function syncWithBot() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –±–æ—Ç–æ–º
    console.log('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–æ—Ç–æ–º:', state);
    // –ü—Ä–∏–º–µ—Ä: fetch('/sync', { method: 'POST', body: JSON.stringify(state) });
}

document.addEventListener('DOMContentLoaded', () => {
    loadState();

    const authSection = document.getElementById('auth-section');
    const gameSection = document.getElementById('game-section');
    const authButton = document.getElementById('auth-button');

    if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.ready();
        const initData = window.Telegram.WebApp.initDataUnsafe;
        if (initData.user) {
            state.chat_id = initData.user.id;
            state.username = initData.user.username || "Unknown";
            authSection.classList.add('hidden');
            gameSection.classList.remove('hidden');
            updateUI();
        } else {
            authSection.classList.remove('hidden');
        }
    } else {
        // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ Telegram Web App
        authSection.classList.add('hidden');
        gameSection.classList.remove('hidden');
        updateUI();
    }

    authButton.addEventListener('click', () => {
        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.ready();
            const initData = window.Telegram.WebApp.initDataUnsafe;
            if (initData.user) {
                state.chat_id = initData.user.id;
                state.username = initData.user.username || "Unknown";
                authSection.classList.add('hidden');
                gameSection.classList.remove('hidden');
                updateUI();
                saveState();
            }
        }
    });

    document.getElementById('click-button').addEventListener('click', () => {
        state.balance += 10;
        if (state.balance >= 10000 && state.level < 2) {
            state.level = 2;
            showMessage('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –¥–æ—Å—Ç–∏–≥ 2-–≥–æ —É—Ä–æ–≤–Ω—è!');
        }
        updateUI();
        saveState();
        syncWithBot();
    });

    document.getElementById('tasks-button').addEventListener('click', () => {
        document.getElementById('tasks-menu').classList.remove('hidden');
        document.getElementById('click-button').classList.add('hidden');
        document.getElementById('tasks-button').classList.add('hidden');
        document.getElementById('withdraw-button').classList.add('hidden');
    });

    document.getElementById('task-work').addEventListener('click', () => {
        if (Math.random() <= 0.1) {
            state.balance -= 100;
            if (state.balance < 0) state.balance = 0;
            showMessage('–ù–µ—É–¥–∞—á–∞! –ü–æ—Ç–µ—Ä—è–Ω–æ 100 –º–æ–Ω–µ—Ç.');
        } else {
            state.balance += 500;
            showMessage('–£—Å–ø–µ—Ö! +500 –º–æ–Ω–µ—Ç.');
        }
        updateUI();
        saveState();
        syncWithBot();
    });

    document.getElementById('task-trade').addEventListener('click', () => {
        if (Math.random() <= 0.3) {
            state.balance -= 500;
            if (state.balance < 0) state.balance = 0;
            showMessage('–ù–µ—É–¥–∞—á–∞! –ü–æ—Ç–µ—Ä—è–Ω–æ 500 –º–æ–Ω–µ—Ç.');
        } else {
            state.balance += 2000;
            showMessage('–£—Å–ø–µ—Ö! +2000 –º–æ–Ω–µ—Ç.');
        }
        updateUI();
        saveState();
        syncWithBot();
    });

    document.getElementById('back-button').addEventListener('click', () => {
        document.getElementById('tasks-menu').classList.add('hidden');
        document.getElementById('click-button').classList.remove('hidden');
        document.getElementById('tasks-button').classList.remove('hidden');
        document.getElementById('withdraw-button').classList.remove('hidden');
    });

    document.getElementById('withdraw-button').addEventListener('click', () => {
        if (state.balance < 1000) {
            showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω. 1000)!');
        } else {
            const points = state.balance / 1000;
            state.balance = 0;
            showMessage(`–í—ã –≤—ã–≤–µ–ª–∏ ${points} –æ—á–∫–æ–≤! –ë–∞–ª–∞–Ω—Å: 0`);
            updateUI();
            saveState();
            syncWithBot();
        }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∏–≥—Ä—ã
    if (state.balance >= 1000000) {
        showMessage('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª 1,000,000 –º–æ–Ω–µ—Ç –∏ –ø–æ–±–µ–¥–∏–ª! üèÜ');
        state.balance = 1000;
        state.level = 1;
        updateUI();
        saveState();
        syncWithBot();
    } else if (state.balance <= 0) {
        showMessage('–¢—ã —Ä–∞–∑–æ—Ä–∏–ª—Å—è! –ù–∞—á–∏–Ω–∞–π –∑–∞–Ω–æ–≤–æ.');
        state.balance = 1000;
        state.level = 1;
        updateUI();
        saveState();
        syncWithBot();
    }
});